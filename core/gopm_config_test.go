package core

/* Test autogenerated with the tool go-test-gen. Created 2024-06-26 15:56:22 Wednesday */

import (
	"io/fs"
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
)

func createGoPMFile(content string, permissions fs.FileMode) {
	file, _ := os.OpenFile(GOPM_CONFIG_FILE, os.O_CREATE|os.O_WRONLY, permissions)
	defer file.Close()
	file.Write([]byte(content))
}

func cleanupConfigTest() {
	os.Remove(GOPM_CONFIG_FILE)
}

func TestNewGoPMConfig(t *testing.T) {
	assert := assert.New(t)
	config := NewGoPMConfig()
	assert.NotNil(config)
}

func TestReadConfig(t *testing.T) {
	defer cleanupConfigTest()
	assert := assert.New(t)

	// test without gopm.json file existing
	config, err := ReadConfig()
	assert.NotNil(err)
	assert.Nil(config)

	// test with gopm.json file but malformed
	json := `
		{
		"author": "dterbah",
		"description": "Description of the project",
		"version": "1.0.0",
		"entry": "main.go",
		"license": "MIT",
		"scripts": {
			"build": "go build",
			"fmt": "go fmt ./...",
			"run": "go run main.go",
			"test": "go test ./..."
		},
		"name": "go-project",
		"git": "github.com/dterbah/go-project",
		"dependencies": {
			"github.com/dterbah/go-test-gen": "latest",
			"github.com/dterbah/gods": "v1.0.1"
		}
	`

	createGoPMFile(json, 0644)

	config, err = ReadConfig()
	assert.NotNil(err)
	assert.Nil(config)

	// test with gopm.json without permission
	createGoPMFile(json, 0111)
	config, err = ReadConfig()
	assert.NotNil(err)
	assert.Nil(config)

	// test with correct gopm.json
	json = `
		{
  "author": "dterbah",
  "description": "Description of the project",
  "version": "1.0.0",
  "entry": "main.go",
  "license": "MIT",
  "scripts": {
    "build": "go build",
    "fmt": "go fmt ./...",
    "run": "go run main.go",
    "test": "go test ./..."
  },
  "name": "go-project",
  "git": "github.com/dterbah/go-project",
  "dependencies": {
    "github.com/dterbah/go-test-gen": "latest",
    "github.com/dterbah/gods": "v1.0.1"
  }
}
	`

	createGoPMFile(json, 0644)
	config, err = ReadConfig()
	assert.Nil(err)
	assert.NotNil(config)

	assert.Equal("dterbah", config.Author)
	assert.Equal("Description of the project", config.Description)
	assert.Equal("1.0.0", config.Version)
	assert.Equal("MIT", config.License)
}

func TestExportConfig(t *testing.T) {
	defer cleanupConfigTest()
	assert := assert.New(t)

	config := NewGoPMConfig()
	config.Author = "toto"

	err := ExportConfig(*config, GOPM_CONFIG_FILE)
	assert.Nil(err)

	config, _ = ReadConfig()
	assert.Equal("toto", config.Author)
}
